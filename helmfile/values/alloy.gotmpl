alloy:
  configMap:
    content: |
      // Kubernetes discovery
      discovery.kubernetes "pods" {
        role = "pod"
      }

      // Relabeling for logs
      discovery.relabel "logs" {
        targets = discovery.kubernetes.pods.targets
        
        rule {
          source_labels = ["__meta_kubernetes_pod_phase"]
          action = "keep"
          regex = "Running"
        }
        
        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          target_label = "namespace"
        }
        
        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          target_label = "pod"
        }
        
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          target_label = "container"
        }
        
        rule {
          source_labels = ["__meta_kubernetes_pod_node_name"]
          target_label = "node"
        }
        
        rule {
          regex = "__meta_kubernetes_pod_label_(.+)"
          action = "labelmap"
        }
        
        rule {
          source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
          target_label = "__path__"
          separator = "/"
          replacement = "/var/log/pods/*$1/*.log"
        }
      }

      // Relabeling for metrics
      discovery.relabel "metrics" {
        targets = discovery.kubernetes.pods.targets
        
        rule {
          source_labels = ["__meta_kubernetes_pod_phase"]
          action = "keep"
          regex = "Running"
        }
        
        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          target_label = "namespace"
        }
        
        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          target_label = "pod"
        }
        
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          target_label = "container"
        }
        
        rule {
          source_labels = ["__meta_kubernetes_pod_node_name"]
          target_label = "node"
        }
        
        rule {
          regex = "__meta_kubernetes_pod_label_(.+)"
          action = "labelmap"
        }
        
        rule {
          source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
          target_label = "job"
          separator = "/"
        }
      }

      // Log collection
      loki.source.kubernetes "logs" {
        targets = discovery.relabel.logs.output
        forward_to = [loki.process.logs.receiver]
      }

      loki.process "logs" {
        stage.static_labels {
          values = {
            cluster = "kkg",
          }
        }
        
        stage.json {
          expressions = {
            level = "level",
          }
        }
        
        stage.labels {
          values = {
            level = "",
          }
        }
        
        forward_to = [loki.write.default.receiver]
      }

      loki.write "default" {
        endpoint {
          url = "http://loki-gateway.loki/loki/api/v1/push"
          headers = {
            "X-Scope-OrgID" = "fake",
          }
        }
      }

      // Metrics collection
      prometheus.scrape "pods" {
        targets = discovery.relabel.metrics.output
        forward_to = [prometheus.relabel.metrics.receiver]
        scrape_interval = "30s"
        scrape_timeout = "10s"
      }

      prometheus.relabel "metrics" {
        forward_to = [prometheus.remote_write.default.receiver]
        
        rule {
          source_labels = ["__name__"]
          action = "keep"
          regex = "up|.*_total|.*_info|.*_seconds.*|.*_bytes.*|.*_count.*|container_.*|kube_.*"
        }
        
        rule {
          replacement = "kkg"
          target_label = "cluster"
        }
      }

      prometheus.remote_write "default" {
        endpoint {
          url = "http://mimir-nginx.mimir/api/v1/push"
          headers = {
            "X-Scope-OrgID" = "anonymous",
          }
        }
      }

serviceMonitor:
  enabled: false

ingress:
  enabled: true
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
  ingressClassName: traefik
  hosts:
    - alloy.str08.net
  tls:
    - hosts:
        - alloy.str08.net
      secretName: alloy.str08.net-dns01
