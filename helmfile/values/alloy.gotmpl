alloy:
  configMap:
    content: |
      // Loki write endpoint for logs
      loki.write "default" {
        endpoint {
          url = "http://loki-gateway.loki/loki/api/v1/push"
          headers = {
            "X-Scope-OrgID" = "fake",
          }
        }
      }

      // Prometheus remote write endpoint for metrics
      prometheus.remote_write "default" {
        endpoint {
          url = "http://mimir-nginx.mimir/api/v1/push"
          headers = {
            "X-Scope-OrgID" = "anonymous",
          }
        }
        
        external_labels = {
          cluster = "kkg",
        }
      }

      // Mimir rules endpoint for PrometheusRule resources
      mimir.rules.kubernetes "default" {
        address = "http://mimir-nginx.mimir"
        tenant_id = "anonymous"
        
        // Select all PrometheusRule resources (empty selector)
        rule_selector {
          match_labels = {}  // Monitor all PrometheusRule resources
        }
        
        // Select namespaces where PrometheusRule resources are monitored
        rule_namespace_selector {
          match_labels = {}  // Monitor all namespaces
        }
      }

      // Kubernetes discovery for services
      discovery.kubernetes "services" {
        role = "service"
      }

      // Kubernetes discovery for pods
      discovery.kubernetes "pods" {
        role = "pod"
      }

      // Kubernetes discovery for nodes
      discovery.kubernetes "nodes" {
        role = "node"
      }

      // Kubernetes discovery for PodMonitors
      discovery.kubernetes "podmonitors" {
        role = "podmonitor"
      }

      // Kubernetes discovery for ServiceMonitors
      discovery.kubernetes "servicemonitors" {
        role = "servicemonitor"
      }

      // Scrape Kubernetes API server metrics
      prometheus.scrape "kubernetes_api" {
        targets = discovery.kubernetes.services.targets
        forward_to = [prometheus.remote_write.default.receiver]
        
        scrape_interval = "30s"
        metrics_path = "/metrics"
        
        clustering {
          enabled = true
        }
      }

      // Scrape node metrics (kubelet)
      prometheus.scrape "kubernetes_nodes" {
        targets = discovery.kubernetes.nodes.targets
        forward_to = [prometheus.remote_write.default.receiver]
        
        scrape_interval = "30s"
        metrics_path = "/metrics"
        scheme = "https"
        bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
        tls_config {
          ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
          insecure_skip_verify = true
        }
        
        clustering {
          enabled = false  // Disable clustering for node metrics to avoid duplicates
        }
      }

      // Scrape cAdvisor metrics
      prometheus.scrape "kubernetes_cadvisor" {
        targets = discovery.kubernetes.nodes.targets
        forward_to = [prometheus.remote_write.default.receiver]
        
        scrape_interval = "30s"
        metrics_path = "/metrics/cadvisor"
        scheme = "https"
        bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
        tls_config {
          ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
          insecure_skip_verify = true
        }
        
        clustering {
          enabled = false  // Disable clustering for cAdvisor to avoid duplicates
        }
      }

      // Process PodMonitors
      prometheus.operator.podmonitors "podmonitors" {
        forward_to = [prometheus.remote_write.default.receiver]
        
        clustering {
          enabled = true
        }
      }

      // Process ServiceMonitors
      prometheus.operator.servicemonitors "servicemonitors" {
        forward_to = [prometheus.remote_write.default.receiver]
        
        clustering {
          enabled = true
        }
      }

      // Collect pod logs
      loki.source.podlogs "pod_logs" {
        forward_to = [loki.write.default.receiver]
        
        clustering {
          enabled = true
        }
      }

      // Scrape Alloy's own metrics
      prometheus.scrape "alloy_metrics" {
        targets = [{"__address__" = "localhost:12345"}]
        forward_to = [prometheus.remote_write.default.receiver]
        scrape_interval = "15s"
        metrics_path = "/metrics"
        
        clustering {
          enabled = false  // Don't cluster self-monitoring
        }
      }

serviceMonitor:
  enabled: true

rbac:
  create: true

serviceAccount:
  create: true

# Additional RBAC rules for PrometheusRule access
extraObjects:
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: alloy-prometheusrule-reader
    rules:
    - apiGroups: [""]
      resources: ["namespaces"]
      verbs: ["get", "list", "watch"]
    - apiGroups: ["monitoring.coreos.com"]
      resources: ["prometheusrules"]
      verbs: ["get", "list", "watch"]
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: alloy-prometheusrule-reader
    subjects:
    - kind: ServiceAccount
      name: alloy
      namespace: alloy
    roleRef:
      kind: ClusterRole
      name: alloy-prometheusrule-reader
      apiGroup: rbac.authorization.k8s.io

ingress:
  enabled: true
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
  ingressClassName: traefik
  hosts:
    - alloy.str08.net
  tls:
    - hosts:
        - alloy.str08.net
      secretName: alloy.str08.net-dns01
